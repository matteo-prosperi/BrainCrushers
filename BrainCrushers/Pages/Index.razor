@page "/"
@page "/{chapter}"

@using Markdig
@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.CSharp
@using Microsoft.CodeAnalysis.Emit
@using Microsoft.CodeAnalysis.Text
@using System.Text.RegularExpressions
@using System.Runtime.Loader
@using System.Text

<PageTitle>@Title</PageTitle>

@if(ErrorText is not null)
{
	@ErrorText
}
else
{
	@foreach (var element in MarkDown!.Sections)
	{
		if (element is ChapterMarkdown.Html htmlElement)
		{
			<div>
				@((MarkupString)htmlElement.Value)
			</div>
		}
		else if (element is ChapterMarkdown.CodeRegion codeElement)
		{
			<div>
				<textarea @bind="codeElement.Region.Code" style="align-self:stretch" readonly="@codeElement.IsReadonly" />
			</div>
		}
		else if (element is ChapterMarkdown.RunCommand runElement)
		{
			<div>
				<button class="btn btn-primary" @onclick="@(() => RunAsync(runElement))" disabled="@IsBuildDisabled">Build and run</button>
			</div>
			<div>
				<textarea style="align-self:stretch" readonly>@runElement.Result</textarea>
			</div>
		}
	}
}

@code{
	[Parameter]
	public string? Chapter { get; set; }

	[Inject]
	public HttpClient Client { get; set; }

	[Inject]
	public NavigationManager NavigationManager { get; set; }

	public string? ErrorText { get; private set; } = "Loading...";

	public string? Title { get; private set; } = "Loading...";

	public ChapterMarkdown? MarkDown;

	public bool IsBuildDisabled { get; private set; } = false;

	public Task<string> TestingCode;

	protected override async Task OnInitializedAsync()
	{
		NavigationManager.LocationChanged += HandleLocationChanged;

		if (Chapter is null)
		{
			Chapter = "index";
		}

		var markdownTask = Client.GetStringAsync($"chapters/{Uri.EscapeDataString(Chapter)}/index.md");
		var codeTask = Client.GetStringAsync($"chapters/{Uri.EscapeDataString(Chapter)}/code.cs");
		TestingCode = Client.GetStringAsync($"chapters/{Uri.EscapeDataString(Chapter)}/testing.cs");

		var markdown = await markdownTask;
		CodeFile? codeFile = null;
		try
		{
			var code = await codeTask;
			codeFile = new(code);
		}
		catch
		{
		}

		MarkDown = new ChapterMarkdown(markdown, codeFile);

		ErrorText = null;
		Title = Chapter;
	}

	private async void RunAsync(ChapterMarkdown.RunCommand command)
	{
		IsBuildDisabled = true;
		command.Result = String.Empty;

		var compiler = new Compiler(Client);
		string code = string.Join(Environment.NewLine, MarkDown!.Code.Regions.Select(c => c.Code));

		var (compilationResult, collectibleType) = await compiler.CompileAsync(new string[] { code, await TestingCode }, command.TypeName);
		try
		{
			if (!compilationResult.Success)
			{
				StringBuilder sb = new();
				sb.AppendLine();
				sb.AppendLine("Diagnostics:");
				foreach (var d in compilationResult.Diagnostics)
				{
					sb.AppendLine();
					sb.AppendLine(d.ToString());
				}
				command.Result = sb.ToString();
				return;
			}

			if (collectibleType?.Type is not null)
			{
				object chapterComponent = Activator.CreateInstance(collectibleType.Type)!;
				try
				{
					var runAsync = collectibleType.Type.GetMethod("TestAsync")!;
					await foreach (string s in (IAsyncEnumerable<string>)runAsync.Invoke(chapterComponent, parameters: null)!)
					{
						// TODO find a more efficient way to append data into the output box
						command.Result += s;
						StateHasChanged();
					}
				}
				catch (ApplicationException e)
				{
					command.Result += Environment.NewLine + e.Message;
					if (e.InnerException is not null)
					{
						command.Result += Environment.NewLine + e.InnerException.ToString();
					}
					StateHasChanged();
				}
			}
		}
		finally
		{
			collectibleType?.Dispose();
			IsBuildDisabled = false;
			StateHasChanged();
		}
	}

	private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
	{
		// TODO Handle navigation
	}

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }
}
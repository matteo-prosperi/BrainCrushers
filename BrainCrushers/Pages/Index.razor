@page "/"
@page "/{chapter}"

@using System.Text
@using Blazored.LocalStorage
@using System.Text.Json
@using System.IO.Compression

<PageTitle>@Title</PageTitle>

@if(ErrorText is not null)
{
	@ErrorText
}
else
{
	@foreach (var element in MarkDown!.Sections)
	{
		if (element is ChapterMarkdown.Html htmlElement)
		{
			<div class="container-fluid">
				@((MarkupString)htmlElement.Value)
			</div>
		}
		else if (element is ChapterMarkdown.CodeRegion codeElement)
		{
			@if (codeElement.Region.Name is not null)
			{
				@if (codeElement.IsReadonly)
				{
					<div class="btn-group" style="margin-left:15px">
						<button type="button" class="btn btn-secondary btn-sm" disabled>@codeElement.Region.Name</button>
					</div>
				}
				else
				{
					<div class="btn-group" style="margin-left:15px">
						<button type="button" class="btn btn-info btn-sm" disabled>@codeElement.Region.Name</button>
						<button type="button" class="btn btn-info btn-sm" @onclick="@(codeElement.Region.ResetCode)" title="Reset" disabled="@(!codeElement.Region.IsResettable)">
							<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-counterclockwise" viewBox="0 0 16 16">
							  <path fill-rule="evenodd" d="M8 3a5 5 0 1 1-4.546 2.914.5.5 0 0 0-.908-.417A6 6 0 1 0 8 2v1z"></path>
							  <path d="M8 4.466V.534a.25.25 0 0 0-.41-.192L5.23 2.308a.25.25 0 0 0 0 .384l2.36 1.966A.25.25 0 0 0 8 4.466z"></path>
							</svg>
						</button>
					</div>
				}
			}
			<div class="container-fluid" style="height:@(codeElement.Region.LineCount * 19 + 12)px;background-color:@(codeElement.IsReadonly ? "#A0A6AB":"#62DDF5")">
				<MonacoEditor ConstructionOptions="@((editor) => EditorConstructionOptions(editor, codeElement))" OnDidChangeModelContent="@(codeElement.Region.OnEditorCodeChange)" />
			</div>
		}
		else if (element is ChapterMarkdown.RunCommand runElement)
		{
			<div class="container-fluid">
				<div class="btn-group">
					<button class="btn btn-primary" @onclick="@(() => RunAsync(runElement))" disabled="@IsBuildDisabled">Build and run <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" hidden="@(!IsBuildDisabled)"></span></button>
					<button class="btn btn-primary" @onclick="@SharePage" title="Share your solution" disabled="@IsBuildDisabled">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-share" viewBox="0 0 16 16">
							<path d="M13.5 1a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3zM11 2.5a2.5 2.5 0 1 1 .603 1.628l-6.718 3.12a2.499 2.499 0 0 1 0 1.504l6.718 3.12a2.5 2.5 0 1 1-.488.876l-6.718-3.12a2.5 2.5 0 1 1 0-3.256l6.718-3.12A2.5 2.5 0 0 1 11 2.5zm-8.5 4a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3zm11 5.5a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3z"/>
						</svg>
					</button>
				</div>
			</div>
			<div class="container-fluid" style="height:@(runElement.LineCount * 19 + 5)px;background-color:@(runElement.Success switch { true => "lightgreen", false => "pink", _ => "white"})">
				<MonacoEditor ConstructionOptions="@((editor) => OutputConstructionOptions(editor, runElement))" />
			</div>
		}
	}
}
<div class="toast-container position-fixed bottom-0 end-0 p-3">
	<div class="toast align-items-center" role="alert" aria-live="assertive" aria-atomic="true">
	  <div class="d-flex">
		<div class="toast-body">
		Hello, world! This is a toast message.
	   </div>
		<button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
	  </div>
	</div>
</div>
@code{

	#pragma warning disable CS8618 //Non-nullable property must contain a non-null value when exiting constructor
	[Inject]
	public HttpClient Client { get; set; }
	[Inject]
	ISyncLocalStorageService LocalStorage { get; set; }
	[Inject]
	IJSRuntime JS { get; set; }

	// Set when setting URI parameters

	[Parameter]
	public string Chapter { get; set; }
	[Parameter]
	[SupplyParameterFromQuery(Name = "code")]
	public string QueryProvidedCode { get; set; }

	public string Title { get; private set; }
	public Task<string> TestingCode;
#pragma warning restore CS8618

	public string? ErrorText { get; private set; }
	public ChapterMarkdown? MarkDown { get; private set; }
	public bool IsBuildDisabled { get; private set; }

	private string AssemblyBuild = typeof(Program).Assembly.ManifestModule.ModuleVersionId.ToString();

	protected override async Task OnParametersSetAsync()
	{
		try
		{
			ErrorText = "Loading...";
			Title = "Brain Crushers";
			IsBuildDisabled = false;
			MarkDown = null;

			if (Chapter is null)
			{
				Chapter = "index";
			}

			var markdownTask = Client.GetStringAsync($"chapters/{Uri.EscapeDataString(Chapter)}/index.md?v={AssemblyBuild}");
			var codeTask = Client.GetStringAsync($"chapters/{Uri.EscapeDataString(Chapter)}/code.cs?v={AssemblyBuild}");
			TestingCode = Client.GetStringAsync($"chapters/{Uri.EscapeDataString(Chapter)}/testing.cs?v={AssemblyBuild}");

			StateHasChanged();

			var markdown = await markdownTask;
			CodeFile? codeFile = null;
			try
			{
				var code = await codeTask;
				codeFile = QueryProvidedCode is null
					? new(code, Chapter, LocalStorage)
					: new(code, Chapter, QueryProvidedCode);
			}
			catch
			{
			}

			MarkDown = new ChapterMarkdown(markdown, codeFile);

			ErrorText = null;
			if (MarkDown.Title is not null)
			{
				Title += " - " + MarkDown.Title;
			}
		}
		catch
		{
			ErrorText = "Error loading chapter";
		}
	}

	private async void RunAsync(ChapterMarkdown.RunCommand command)
	{
		IsBuildDisabled = true;
		await command.SetResultAsync(String.Empty, success: null);

		StringBuilder code = new();
		foreach(var region in MarkDown!.Code.Regions)
		{
			code.Append("#line 1 \"");
			code.Append(region.Name is null ? "Unnamed region" : region.Name.Replace('\"', '\''));		
			code.AppendLine("\"");
			code.AppendLine(await region.GetCurrentCodeAsync());
		}

		var compiler = new Compiler(Client);
		var (compilationResult, collectibleType, timeoutCheckActionProperty) = await compiler.CompileAsync(new string[] { code.ToString(), await TestingCode! }, command.TypeName);
		try
		{
			if (!compilationResult.Success)
			{
				StringBuilder sb = new();	
				sb.AppendLine();
				sb.AppendLine("Diagnostics:");
				foreach (var d in compilationResult.Diagnostics.Where(d => d.Severity == Microsoft.CodeAnalysis.DiagnosticSeverity.Error))
				{
					sb.AppendLine();
					sb.AppendLine(d.ToString());
				}
				await command.SetResultAsync(sb.ToString(), success: false);
				return;
			}

			if (collectibleType?.Type is null)
			{
				await command.SetResultAsync($"Couldn't find type {command.TypeName}", success: false);
				return;
			}
			else if (timeoutCheckActionProperty is null)
			{
				await command.SetResultAsync($"The test class {command.TypeName} is missing the static timeout action property", success: false);
				return;
			}
			else
			{
				object chapterComponent = Activator.CreateInstance(collectibleType.Type)!;


				DateTime startTime = DateTime.UtcNow;
				timeoutCheckActionProperty.SetValue(null, new Action(() =>
				{
					if (DateTime.UtcNow - startTime > TimeSpan.FromSeconds(5))
					{
						throw new ApplicationException("Test timeout");
					}
				}));

				try
				{
					var runAsync = collectibleType.Type.GetMethod("TestAsync")!;
					await foreach (string s in (IAsyncEnumerable<string>)runAsync.Invoke(chapterComponent, parameters: null)!)
					{
						await command.SetResultAsync(command.Result + s, success: null);
						StateHasChanged();
					}
				}
				catch (ApplicationException e)
				{
					await command.SetResultAsync(command.Result + Environment.NewLine + e.Message + (e.InnerException is null ? "" : Environment.NewLine + e.InnerException), success: false);
					return;
				}

				await command.SetResultAsync(null, success: true);
			}
		}
		finally
		{
			collectibleType?.Dispose();
			IsBuildDisabled = false;
			StateHasChanged();
		}
	}

	private async void SharePage()
	{
		var save = await MarkDown!.Code.GetCompressedCodeAsync();
		await JS.InvokeAsync<object>("sharePage", "My solution", $"{Title} - Solution", $"{Uri.EscapeDataString(Chapter)}?code={save}");
	}

	private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor, ChapterMarkdown.CodeRegion region)
	{
		region.Region.Editor = editor;

		return new StandaloneEditorConstructionOptions
		{
			AutomaticLayout = true,
			Language = "csharp",
			Value = region.Region.Code,
			ReadOnly = region.IsReadonly,
			ScrollBeyondLastLine = false,
			RenderLineHighlight = "none",
			Minimap = new() { Enabled = false },
			Folding = false,
			InsertSpaces = true,
			TabSize = 4,
			DetectIndentation = false,
			Scrollbar = new() { Vertical = "hidden", AlwaysConsumeMouseWheel = false }
		};
	}

	private StandaloneEditorConstructionOptions OutputConstructionOptions(MonacoEditor editor, ChapterMarkdown.RunCommand runCommand)
	{
		runCommand.Editor = editor;

		return new StandaloneEditorConstructionOptions
		{
			AutomaticLayout = true,
			Language = "text/plain",
			ReadOnly = true,
			LineNumbers = "off",
			ScrollBeyondLastLine = false,
			RenderLineHighlight = "none",
			Minimap = new() { Enabled = false },
			Folding = false,
			Scrollbar = new() { Vertical = "hidden", AlwaysConsumeMouseWheel = false }
		};
	}
}
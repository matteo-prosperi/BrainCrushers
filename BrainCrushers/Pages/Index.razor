@page "/"
@page "/{chapter}"

@using System.Text
@using Blazored.LocalStorage

<PageTitle>@Title</PageTitle>

@if(ErrorText is not null)
{
	@ErrorText
}
else
{
	@foreach (var element in MarkDown!.Sections)
	{
		if (element is ChapterMarkdown.Html htmlElement)
		{
			<div class="container-fluid">
				@((MarkupString)htmlElement.Value)
			</div>
		}
		else if (element is ChapterMarkdown.CodeRegion codeElement)
		{
			@if (codeElement.Region.Name is not null)
			{
				@if (codeElement.IsReadonly)
				{
					<div class="btn-group">
					  <button class="btn btn-secondary btn-sm" type="button" disabled>@codeElement.Region.Name</button>
					</div>
				}
				else
				{
					<div class="btn-group">
						<button class="btn btn-info btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">@codeElement.Region.Name</button>
						<ul class="dropdown-menu">
							<li><button class="dropdown-item" @onclick="@(codeElement.Region.ResetCode)">Reset code</button></li>
						</ul>
					</div>
				}
			}
			<div class="container-fluid" style="height:@(codeElement.Region.LineCount * 19 + 5)px;background-color:@(codeElement.IsReadonly ? "#A0A6AB":"#0DCAF0")">
				<MonacoEditor ConstructionOptions="@((editor) => EditorConstructionOptions(editor, codeElement))" OnDidChangeModelContent="@(codeElement.Region.OnEditorCodeChange)" />
			</div>
		}
		else if (element is ChapterMarkdown.RunCommand runElement)
		{
			<div class="container-fluid">
				<button class="btn btn-primary" @onclick="@(() => RunAsync(runElement))" disabled="@IsBuildDisabled">Build and run <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" hidden="@(!IsBuildDisabled)"></span></button>
			</div>
			<div class="container-fluid" style="height:@(runElement.LineCount * 19 + 5)px;background-color:@(runElement.Success switch { true => "lightgreen", false => "pink", _ => "white"})">
				<MonacoEditor ConstructionOptions="@((editor) => OutputConstructionOptions(editor, runElement))" />
			</div>
		}
	}
}

@code{

#pragma warning disable CS8618 //Non-nullable property must contain a non-null value when exiting constructor
	[Inject]
	public HttpClient Client { get; set; }
	[Inject]
	ISyncLocalStorageService LocalStorage { get; set; }

	// Set when setting URI parameters

	[Parameter]
	public string Chapter { get; set; }
	public string Title { get; private set; }
	public Task<string> TestingCode;
#pragma warning restore CS8618

	public string? ErrorText { get; private set; }
	public ChapterMarkdown? MarkDown { get; private set; }
	public bool IsBuildDisabled { get; private set; }

	private string AssemblyBuild = typeof(Program).Assembly.ManifestModule.ModuleVersionId.ToString();

	protected override async Task OnParametersSetAsync()
	{
		try
		{
			ErrorText = "Loading...";
			Title = "Loading...";
			IsBuildDisabled = false;
			MarkDown = null;

			if (Chapter is null)
			{
				Chapter = "index";
			}

			var markdownTask = Client.GetStringAsync($"chapters/{Uri.EscapeDataString(Chapter)}/index.md?v={AssemblyBuild}");
			var codeTask = Client.GetStringAsync($"chapters/{Uri.EscapeDataString(Chapter)}/code.cs?v={AssemblyBuild}");
			TestingCode = Client.GetStringAsync($"chapters/{Uri.EscapeDataString(Chapter)}/testing.cs?v={AssemblyBuild}");

			StateHasChanged();

			var markdown = await markdownTask;
			CodeFile? codeFile = null;
			try
			{
				var code = await codeTask;
				codeFile = new(code, Chapter, LocalStorage);
			}
			catch
			{
			}

			MarkDown = new ChapterMarkdown(markdown, codeFile);

			ErrorText = null;
			Title = Chapter;
		}
		catch
		{
			ErrorText = "Error loading chapter";
		}
	}

	private async void RunAsync(ChapterMarkdown.RunCommand command)
	{
		IsBuildDisabled = true;
		await command.SetResultAsync(String.Empty, success: null);

		StringBuilder code = new();
		foreach(var region in MarkDown!.Code.Regions)
		{
			code.Append("#line 1 \"");
			code.Append(region.Name is null ? "Unnamed region" : region.Name.Replace('\"', '\''));		
			code.AppendLine("\"");
			code.AppendLine(await region.GetCurrentCodeAsync());
		}

		var compiler = new Compiler(Client);
		var (compilationResult, collectibleType) = await compiler.CompileAsync(new string[] { code.ToString(), await TestingCode! }, command.TypeName);
		try
		{
			if (!compilationResult.Success)
			{
				StringBuilder sb = new();
				sb.AppendLine();
				sb.AppendLine("Diagnostics:");
				foreach (var d in compilationResult.Diagnostics)
				{
					sb.AppendLine();
					sb.AppendLine(d.ToString());
				}
				await command.SetResultAsync(sb.ToString(), success: false);
				return;
			}

			if (collectibleType?.Type is not null)
			{
				object chapterComponent = Activator.CreateInstance(collectibleType.Type)!;
				try
				{
					var runAsync = collectibleType.Type.GetMethod("TestAsync")!;
					await foreach (string s in (IAsyncEnumerable<string>)runAsync.Invoke(chapterComponent, parameters: null)!)
					{
						await command.SetResultAsync(command.Result + s, success: null);
						StateHasChanged();
					}
				}
				catch (ApplicationException e)
				{
					await command.SetResultAsync(command.Result + Environment.NewLine + e.Message + (e.InnerException is null ? "" : Environment.NewLine + e.InnerException), success: false);
					return;
				}

				await command.SetResultAsync(null, success: true);
			}
		}
		finally
		{
			collectibleType?.Dispose();
			IsBuildDisabled = false;
			StateHasChanged();
		}
	}

	private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor, ChapterMarkdown.CodeRegion region)
	{
		region.Region.Editor = editor;

		return new StandaloneEditorConstructionOptions
		{
			AutomaticLayout = true,
			Language = "csharp",
			Value = region.Region.Code,
			ReadOnly = region.IsReadonly,
			ScrollBeyondLastLine = false,
			RenderLineHighlight = "none",
			Minimap = new() { Enabled = false },
			Folding = false
		};
	}

	private StandaloneEditorConstructionOptions OutputConstructionOptions(MonacoEditor editor, ChapterMarkdown.RunCommand runCommand)
	{
		runCommand.Editor = editor;

		return new StandaloneEditorConstructionOptions
		{
			AutomaticLayout = true,
			Language = "text/plain",
			ReadOnly = true,
			LineNumbers = "off",
			ScrollBeyondLastLine = false,
			RenderLineHighlight = "none",
			Minimap = new() { Enabled = false },
			Folding = false
		};
	}
}